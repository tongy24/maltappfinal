//
//  DisNegFutRatVC.swift
//  MortgageAssistance&LearningTool
//
//  Created by Chris Bodger on 27/01/2017.
//

import UIKit

class DisNegFutRatVC: BaseViewController {
    
    @IBAction func goBackButton(_ sender: Any) {
    
        self.dismiss(animated:true)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        addSlideMenuButton()
        // Do any additional setup after loading the view.
        
        
        
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    
    /*
     // MARK: - Navigation
     
     // In a storyboard-based application, you will often want to do a little preparation before navigation
     override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
     // Get the new view controller using segue.destinationViewController.
     // Pass the selected object to the new view controller.
     }
     */
 

    @IBOutlet weak var variableLoanAmount7: UITextField!
    @IBOutlet weak var valueReturn7: UITextField!

    func letsDoThis7(z: Float) -> Float {
        
        
        var t = 241
        
        var T_1 = [Int]()
        
        // Create Array from 0 to 240, and return a to zero on completion
        for a in 0...t {
            T_1.append(a)
        }
        
        
        var interest = [Float](arrayLiteral: 0.00125, 0.0012705969308333333, 0.0012565511275, 0.0012792467275, 0.00134756819, 0.0015718268625, 0.001575039285, 0.0016312942341666667, 0.0017133982533333334, 0.0016634711166666665, 0.0017075415983333335, 0.0017082350516666666, 0.0016624650391666666, 0.0016772979816666667, 0.0017821348416666668, 0.0017506085616666666, 0.0017443050325000001, 0.001786366135, 0.0017790635600000001, 0.0018737852383333335, 0.001866735031666667, 0.0018769948591666667, 0.0019066511791666666, 0.00196384044, 0.0018846157616666667, 0.0019246122916666668, 0.0019880820250000003, 0.0020074356075, 0.0019822009125, 0.001989543830833333, 0.0019544920541666668, 0.001967300435, 0.0020216636958333336, 0.002056347205, 0.0020390915841666667, 0.002136341333333333, 0.002065480261666667, 0.0021015407458333333, 0.0020696330525, 0.002149285715, 0.0021695370608333336, 0.0022319192775, 0.0022176186, 0.0022519438308333333, 0.002244639365, 0.0021640834575, 0.002205518699166667, 0.002336526705, 0.0023148967516666667, 0.002310918615, 0.002310358309166667, 0.0022261866058333334, 0.0023116473691666664, 0.0022989593375, 0.002273530954166667, 0.0022842022208333333, 0.0023009172391666665, 0.0022784068416666667, 0.0023440531208333334, 0.00239327816, 0.00300150803, 0.0030243683416666667, 0.0030988832025, 0.0031348475966666667, 0.0030501738500000003, 0.003022003215833333, 0.0030940718858333337, 0.00313402001, 0.0031459625558333333, 0.0030515141775, 0.0031076500333333335, 0.0030813384233333335, 0.0030955512874999997, 0.003073067785, 0.003178358394166667, 0.0030511010775, 0.0032100585241666667, 0.003208436126666667, 0.0031293987691666664, 0.0032348947049999997, 0.003334102018333334, 0.003407478575, 0.0034897025958333335, 0.003483205430833333, 0.003345651375833333, 0.003453788430833333, 0.0032507200116666667, 0.0034250511249999996, 0.003465102528333333, 0.0035987802058333332, 0.003414244506666667, 0.0035325041358333334, 0.0034061726358333333, 0.003624535235, 0.003984670829166667, 0.004278045396666667, 0.004908404525, 0.005668677420833333, 0.005973423584166667, 0.0062016506775, 0.006248163651666666, 0.006226546829166666, 0.006292809520833334, 0.006255007633333333, 0.006596121964166667, 0.0066177881800000005, 0.006881230842500001, 0.0068350938316666665, 0.0068726650325, 0.007126953658333333, 0.007033511697500001, 0.007150523957500001, 0.006977883706666666, 0.006681631588333333, 0.0070087718525, 0.00685054161, 0.006739972944166667, 0.006722413380833333, 0.006878299614166666, 0.006654893082499999, 0.006709695715, 0.006418050099999999, 0.0064343995175, 0.006531135041666667, 0.006296692825833334, 0.00632731286, 0.006294592355833333, 0.00627082372, 0.0062762831125, 0.006577596978333333, 0.0063780835675, 0.0064159368725, 0.006350088773333333, 0.0060873068275, 0.0063948244425, 0.0065100426675, 0.006516329545833333, 0.006573957819166667, 0.006640488313333333, 0.006730165472500001, 0.006846270874166667, 0.006951115595833332, 0.006618823606666667, 0.006815634289166666, 0.006874359284166666, 0.006527256335, 0.00688644411, 0.0070029447525, 0.0064949650425, 0.006781057398333333, 0.0064534859091666666, 0.006358696111666667, 0.006385748148333333, 0.006433189395833334, 0.0063046046566666665, 0.006325997335833333, 0.006123102996666667, 0.0059715417425, 0.0060851429075, 0.006192873969999999, 0.00595734495, 0.0062292717299999995, 0.006456822145, 0.006358368089166667, 0.0064872547675, 0.006658419000833333, 0.0063900912100000005, 0.006627704001666667, 0.006420229340833333, 0.006308060396666666, 0.006833681313333333, 0.0065296583225, 0.00662300074, 0.006671276318333333, 0.0066366313175, 0.0068551875508333325, 0.006880416211666667, 0.006764948489166667, 0.006610802375833333, 0.006840170578333334, 0.006992573650833333, 0.007135005110833334, 0.007361255293333334, 0.00762403114, 0.007958541049166667, 0.0080597785025, 0.007583031984166667, 0.008144313865833334, 0.008314941020000001, 0.008335451775, 0.008554248541666667, 0.008745085683333334, 0.008781253066666666, 0.008609408975, 0.008685660608333333, 0.008710772208333334, 0.008821569258333333, 0.008800486316666667, 0.008655335725, 0.00895581745, 0.008714049808333332, 0.008619385824999999, 0.008611255491666667, 0.008625210325, 0.008376227433333333, 0.008426687575, 0.008143370035, 0.008281881805, 0.008126259510833332, 0.008430248908333333, 0.008266594299166668, 0.008156722075000001, 0.008395540116666668, 0.008550486066666666, 0.008978743858333332, 0.009008510441666666, 0.009322286175, 0.009826215416666666, 0.010417851316666667, 0.010233511475, 0.010295518458333335, 0.010584240433333334, 0.010127092658333333, 0.010099431483333332, 0.01006939735, 0.010286492, 0.010427639950000001, 0.010442175225000001, 0.010180913358333333, 0.01032243375, 0.010472432866666666, 0.010478842333333334, 0.009729410033333333, 0.009504754166666666, 0.009558427541666666, 0.009418781675, 0.009103905808333333, 0.009353989108333334, 0.0090759668, 0.009189326983333334)
        
        // Create function to calculate principal, repayments and interest paid on a cumulative monthly basis
        
        func variablerate7(P: inout Float, t: Int) -> Float? {
            var principal = [Float]()
            var i_paid = [Float]()
            i_paid.append(0)
            var repayments = [Float]()
            var R = Float(0)
            
            for a in 1...t-1 {
                P = P - R
                R = (P*interest[a])/(1-pow(1+interest[a],-Float(interest.count-a)))
                repayments.append(R)
                principal.append(P)
                let ip = P*(interest[a-1])
                i_paid.append(i_paid[a-1] + ip)
                P = P*(1+interest[a])
            }
            
            let cc = repayments.max()
            return cc
            
            
        }
        var u = Float(z)
        let dd = variablerate7(P: &u, t: 240)!
        return dd
    }
   
    
    @IBAction func calculateButton7(_ sender: Any) {
    
        let x = (variableLoanAmount7.text as! NSString).doubleValue
        
        let y = letsDoThis7(z: Float(x))
        let z = String(format: "%.2f", y)
        
        valueReturn7.text = "\(z)"
    
    }
    
    
}
