//
//  DisPosFutRatVC.swift
//  MortgageAssistance&LearningTool
//
//  Created by Chris Bodger on 27/01/2017.
//

import UIKit

class DisPosFutRatVC: BaseViewController {
    
    @IBAction func goBackButton(_ sender: Any) {
    
        self.dismiss(animated:true)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        addSlideMenuButton()
        // Do any additional setup after loading the view.
        
        
        
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    
    /*
     // MARK: - Navigation
     
     // In a storyboard-based application, you will often want to do a little preparation before navigation
     override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
     // Get the new view controller using segue.destinationViewController.
     // Pass the selected object to the new view controller.
     }
     */
 
    @IBOutlet weak var variableLoanAmount5: UITextField!
    @IBOutlet weak var valueReturn5: UITextField!
    
    func letsDoThis5(z: Float) -> Float {
        
        
        var t = 241
        
        var T_1 = [Int]()
        
        // Create Array from 0 to 240, and return a to zero on completion
        for a in 0...t {
            T_1.append(a)
        }
        
        
        var interest = [Float](arrayLiteral: 0.00125, 0.0012778034375, 0.00128986631, 0.0012082420266666665, 0.0010911098291666668, 0.001293586705, 0.0013305269233333332, 0.0010980263983333333, 0.0012998925025000001, 0.0012611927908333332, 0.0013114172791666668, 0.0013215244516666667, 0.0011866802891666666, 0.0013387639133333332, 0.0012174770108333332, 0.0011402207199999999, 0.0012999583483333335, 0.0011776029016666667, 0.0011229894925, 0.0012589139791666668, 0.0011571689841666667, 0.001215836545, 0.00118877682, 0.0012278176983333334, 0.001326741475, 0.0012978970616666667, 0.0014040620566666668, 0.0012638372041666665, 0.0010954978991666667, 0.001186595455, 0.0012403466266666667, 0.00139862556, 0.0013456808808333333, 0.00132093344, 0.0012535128158333332, 0.0011010898883333333, 0.0012201601024999999, 0.0014285380408333333, 0.0012871655716666667, 0.0013093826775, 0.0013079523308333334, 0.0011619431075, 0.0012185673833333332, 0.0011671702783333333, 0.00119304715, 0.00135992094, 0.0010946412191666667, 0.001352836865, 0.0012005807091666667, 0.0010697905691666666, 0.0011987380766666667, 0.001145370195, 0.0013470795225, 0.001250109795, 0.0012089693275, 0.001183466265, 0.0012530213408333333, 0.0011306154716666666, 0.0013864741108333333, 0.0012068101158333334, 0.0013129094458333333, 0.001218390945, 0.0012354135408333333, 0.0011172915641666666, 0.0012242297583333333, 0.0013048086033333333, 0.0014303869125, 0.0012717759508333335, 0.0014406633616666667, 0.0013551567516666666, 0.00139600911, 0.0012570909383333333, 0.0012830901275000001, 0.0012566691358333333, 0.0013093797658333334, 0.0013296079541666667, 0.0012198917966666667, 0.0013560606125, 0.001373956575, 0.0012469627275, 0.0011902816466666667, 0.0011797288233333333, 0.0011465874866666665, 0.00126790203, 0.00135809502, 0.0012557148925, 0.0013233017166666666, 0.0011506533683333332, 0.0011715562725, 0.0011136832050000001, 0.0012916459016666666, 0.0012708273108333332, 0.0013595610191666668, 0.0012379829641666667, 0.0013821461941666666, 0.00133190426, 0.0011590826366666665, 0.0012446812166666667, 0.0011210733366666665, 0.0013680311283333333, 0.0012946431466666667, 0.0012635454408333334, 0.0012772373858333335, 0.0011523110316666667, 0.0012347549641666667, 0.0013255967549999999, 0.0013367387658333332, 0.0011367019725, 0.001276256125, 0.0012506426733333333, 0.0014564336208333333, 0.0013900384391666667, 0.0011408319708333333, 0.0011431153783333333, 0.0012173759133333334, 0.0013133732358333334, 0.0013367998649999999, 0.0012478477491666667, 0.0013858415133333334, 0.0011772323408333334, 0.0012955975208333334, 0.0013038819058333335, 0.0012326877608333333, 0.00133054845, 0.0013139121883333335, 0.0012652420325, 0.0011503352416666667, 0.0012817047333333333, 0.0013194262408333334, 0.0011930553416666667, 0.0012270069133333333, 0.0012203561108333333, 0.0012553415041666668, 0.0013578906383333333, 0.0012917178858333333, 0.001280279705, 0.0013906883333333333, 0.0012914119016666666, 0.00126334242, 0.00121895035, 0.0012229282608333333, 0.0012247222166666665, 0.0011390049108333333, 0.0013219334441666667, 0.00128914962, 0.0012344178783333334, 0.0012305848316666666, 0.0012133540141666668, 0.0013959220975, 0.0010790366058333334, 0.0013273335716666667, 0.0012542114883333333, 0.0012948184491666666, 0.00128906852, 0.0012435180858333334, 0.0012508570608333333, 0.0013159027341666666, 0.0012175380075, 0.00133755056, 0.0013771413, 0.0012266435116666666, 0.0011789662958333333, 0.0011778511683333333, 0.0012983324158333334, 0.0012912902475000002, 0.001231000945, 0.0012278819341666667, 0.0011242440225, 0.0013491946866666666, 0.0011820052425, 0.0012848459491666667, 0.0012717942408333332, 0.0012553842541666667, 0.0012503366275, 0.0012125945625000001, 0.0013705652508333333, 0.0012106283116666667, 0.0013543987416666666, 0.001257509975, 0.0012630241441666668, 0.0012679563791666666, 0.0012275579208333334, 0.001270383795, 0.0011996776058333335, 0.0013211439874999998, 0.0012016389150000001, 0.0013494398508333333, 0.00122997205, 0.0012255572433333335, 0.001252236415, 0.0011538298775, 0.0014037572008333333, 0.00126016607, 0.001184878625, 0.0012825714308333333, 0.0012383161083333333, 0.0012298676566666667, 0.0012757382591666666, 0.0012194569633333333, 0.0011690764799999998, 0.0011982056025000001, 0.0013559956874999999, 0.0011869380066666666, 0.0013045384108333333, 0.0011434206766666665, 0.0012171252566666665, 0.0011153724825, 0.0011062411741666668, 0.0012511612883333333, 0.001188882745, 0.0013925958066666666, 0.001264597995, 0.001250665585, 0.0011989748325, 0.0012022997366666667, 0.0013842498874999999, 0.0013262015308333334, 0.0011797243383333334, 0.00121909004, 0.0013124917191666666, 0.0013071806899999999, 0.0014148326616666665, 0.0013547945716666668, 0.0011642269425, 0.0013432546533333333, 0.0014248369916666666, 0.0011259987791666667, 0.0012626262800000002, 0.0013351169166666667, 0.0010943333533333334, 0.0013643144775, 0.0011655085908333332, 0.0011446097558333332, 0.0013500106366666667, 0.0012286791408333332, 0.0014481707425, 0.0013067970758333335, 0.00126137193, 0.0011659763558333335, 0.0012042022083333334)
        
        // Create function to calculate principal, repayments and interest paid on a cumulative monthly basis
        
        func variablerate5(P: inout Float, t: Int) -> Float? {
            var principal = [Float]()
            var i_paid = [Float]()
            i_paid.append(0)
            var repayments = [Float]()
            var R = Float(0)
            
            for a in 1...t-1 {
                P = P - R
                R = (P*interest[a])/(1-pow(1+interest[a],-Float(interest.count-a)))
                repayments.append(R)
                principal.append(P)
                let ip = P*(interest[a-1])
                i_paid.append(i_paid[a-1] + ip)
                P = P*(1+interest[a])
            }
            
            let cc = repayments.max()
            return cc
            
            
        }
        var u = Float(z)
        let dd = variablerate5(P: &u, t: 240)!
        return dd
    }

    @IBAction func calculateButton5(_ sender: Any) {
    
        let x = (variableLoanAmount5.text as! NSString).doubleValue
        
        let y = letsDoThis5(z: Float(x))
        let z = String(format: "%.2f", y)
        
        valueReturn5.text = "\(z)"
    
    }
}
