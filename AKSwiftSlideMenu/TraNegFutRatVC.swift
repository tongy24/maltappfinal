//
//  TraNegFutRatVC.swift
//  MortgageAssistance&LearningTool
//
//  Created by Chris Bodger on 27/01/2017.
//

import UIKit

class TraNegFutRatVC: BaseViewController {
    
    @IBAction func goBackButton(_ sender: Any) {
    
        self.dismiss(animated: true)
    
    }

    
    override func viewDidLoad() {
        super.viewDidLoad()
        addSlideMenuButton()
        // Do any additional setup after loading the view.
        
        
        
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    
    /*
     // MARK: - Navigation
     
     // In a storyboard-based application, you will often want to do a little preparation before navigation
     override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
     // Get the new view controller using segue.destinationViewController.
     // Pass the selected object to the new view controller.
     }
     */

    @IBOutlet weak var variableLoanAmount4: UITextField!
    @IBOutlet weak var valueReturn4: UITextField!



    
    func letsDoThis4(z: Float) -> Float {
        
        
        var t = 241
        
        var T_1 = [Int]()
        
        // Create Array from 0 to 240, and return a to zero on completion
        for a in 0...t {
            T_1.append(a)
        }
        
        
        var interest = [Float](arrayLiteral: 0.00125, 0.0012704152658333334, 0.0012933317441666667, 0.00131150851, 0.0013362379358333335, 0.0013527122074999999, 0.0013623724691666666, 0.0013983474466666666, 0.001421472485, 0.0014315724733333333, 0.0014457163625, 0.0014925268325, 0.0014793659091666667, 0.0015087645591666666, 0.0015625320891666666, 0.0015666773383333334, 0.0015883773733333334, 0.0016124945125, 0.0016392706883333334, 0.0016280650416666666, 0.0016552600299999999, 0.0016580256075, 0.00172309097, 0.0017436640191666668, 0.0018009775025, 0.0017601559891666666, 0.0017853895458333332, 0.0017969007299999998, 0.0018361588558333335, 0.0018433758966666664, 0.0018381663941666668, 0.0019025502741666666, 0.0019259774074999998, 0.0019099332725, 0.0019398374058333333, 0.0019813404400000002, 0.0019987324208333335, 0.0020179650516666666, 0.0020287098216666666, 0.0020218433583333332, 0.0021205006333333332, 0.0020931430166666667, 0.0020936863525, 0.0021400592175, 0.0021744171483333336, 0.0021685913275000003, 0.0022587573658333334, 0.0021890904966666664, 0.002304864255833333, 0.0022039902991666666, 0.002279795425, 0.0023008185291666667, 0.0022585847, 0.0023441885108333336, 0.002366322791666667, 0.0024602060583333333, 0.002424405545833333, 0.0024400541083333333, 0.002469082940833333, 0.0024572743916666667, 0.0025486591550000002, 0.0025435281541666666, 0.00253043204, 0.002582376245, 0.002591861395833333, 0.0025644106033333334, 0.00269086295, 0.0026489168725, 0.0026058928491666665, 0.0027154629858333335, 0.002731947105833333, 0.0026792282850000002, 0.0026444820383333336, 0.002744184749166667, 0.0027875677783333335, 0.0028423724724999998, 0.0027960950025, 0.0029268454875, 0.0028645276016666665, 0.0029274317975, 0.0029849576791666664, 0.0029040187225, 0.0029760871233333332, 0.003121431118333333, 0.0029827135483333333, 0.003017345816666667, 0.002886393215, 0.0031297819583333336, 0.0029972841341666667, 0.0030986011016666667, 0.003107108555, 0.003133943865833333, 0.003213870283333333, 0.0031114415208333334, 0.0035751371783333333, 0.0038067195624999998, 0.004358942194166667, 0.004876063895833334, 0.005646562250833333, 0.006839567470833334, 0.006964238741666667, 0.006910534616666667, 0.006770510285833334, 0.0069244985675, 0.006978080693333334, 0.0073861532475, 0.007450287495, 0.007533656241666667, 0.007742865412499999, 0.00792949397, 0.0082166836975, 0.007842124153333333, 0.008013174265833332, 0.007957500764166667, 0.008183803304166666, 0.008137668695000001, 0.0079254974475, 0.007954254406666666, 0.0080554666775, 0.0079349366975, 0.007970398200000001, 0.007596841164166667, 0.007581972030833333, 0.007557287576666667, 0.007644809311666667, 0.0076676292383333336, 0.0075873204316666675, 0.007826202240833333, 0.0077425565, 0.0076502887641666665, 0.007875717385000001, 0.007671799128333333, 0.007781394261666666, 0.007705290083333333, 0.00808186052, 0.007825882401666666, 0.007722911432500001, 0.007838610325, 0.007475794629999999, 0.007675627373333334, 0.007808472165000001, 0.007638143991666666, 0.007878903789999999, 0.007874920425833333, 0.007810631260833333, 0.0077315186075, 0.008028041213333333, 0.007949355455833333, 0.007928901673333332, 0.008290286180833334, 0.007931993268333333, 0.007717652244166667, 0.007710166239166667, 0.007665819629166667, 0.007573451661666667, 0.007803514683333333, 0.007639607519166667, 0.0073325700375000006, 0.0075603535508333335, 0.007240643031666667, 0.007742464276666667, 0.007451380979166667, 0.0070887315825, 0.007439787729166666, 0.0074365581675, 0.0074693251366666664, 0.007515283205833333, 0.007715424806666666, 0.007655739492500001, 0.007820407361666667, 0.0078149674325, 0.007820385186666667, 0.008146470968333335, 0.007866774235, 0.0077596904575, 0.007687131455, 0.007824594945833334, 0.007836167613333334, 0.007788610471666666, 0.007864024516666667, 0.007921425721666667, 0.00816030224, 0.008265376666666668, 0.008785390925, 0.009184142483333333, 0.009212823308333333, 0.009346610325, 0.009212538458333334, 0.009391790083333334, 0.009856091716666666, 0.0097883728, 0.009642258066666666, 0.009627051041666668, 0.009868032258333333, 0.009726823933333333, 0.00994831735, 0.009872277, 0.01002931265, 0.010141191633333334, 0.009836484983333333, 0.010081979566666666, 0.010196300333333333, 0.010093013533333334, 0.010159750258333333, 0.010090234633333334, 0.009764859766666667, 0.009592201016666666, 0.010014307608333333, 0.00999329015, 0.009628390491666666, 0.009411834233333334, 0.010227785233333333, 0.009910870541666667, 0.010131319900000001, 0.010250439525, 0.010560658575, 0.011543788191666666, 0.011483058091666666, 0.011670803091666666, 0.011959663183333333, 0.011452637441666667, 0.011749317966666667, 0.012039356491666667, 0.011745260833333333, 0.012079695216666665, 0.01190884895, 0.0118047477, 0.012157728891666667, 0.012015919441666667, 0.011913951858333332, 0.01189842935, 0.011612575841666667, 0.0115562414, 0.011088360383333334, 0.011063902308333333, 0.011370813075000001, 0.010855116925, 0.011107548891666668, 0.011380633791666666, 0.010929702141666667)
        
        // Create function to calculate principal, repayments and interest paid on a cumulative monthly basis
        
        func variablerate4(P: inout Float, t: Int) -> Float? {
            var principal = [Float]()
            var i_paid = [Float]()
            i_paid.append(0)
            var repayments = [Float]()
            var R = Float(0)
            
            for a in 1...t-1 {
                P = P - R
                R = (P*interest[a])/(1-pow(1+interest[a],-Float(interest.count-a)))
                repayments.append(R)
                principal.append(P)
                let ip = P*(interest[a-1])
                i_paid.append(i_paid[a-1] + ip)
                P = P*(1+interest[a])
            }
            
            let cc = repayments.max()
            return cc
            
            
        }
        var u = Float(z)
        let dd = variablerate4(P: &u, t: 240)!
        return dd
    }
    

    @IBAction func calculateButton4(_ sender: Any) {
    
    
        let x = (variableLoanAmount4.text as! NSString).doubleValue
        
        let y = letsDoThis4(z: Float(x))
        let z = String(format: "%.2f", y)
        
        valueReturn4.text = "\(z)"
    
    }
    
}
