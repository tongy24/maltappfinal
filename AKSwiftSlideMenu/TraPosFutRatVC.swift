//
//  TraPosFutRatVC.swift
//  MortgageAssistance&LearningTool
//
//  Created by Chris Bodger on 27/01/2017.
//

import UIKit

class TraPosFutRatVC: BaseViewController {
    
    @IBAction func goBackButton(_ sender: Any) {
    
        self.dismiss(animated: true)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        addSlideMenuButton()
        // Do any additional setup after loading the view.
        
       
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    
    /*
     // MARK: - Navigation
     
     // In a storyboard-based application, you will often want to do a little preparation before navigation
     override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
     // Get the new view controller using segue.destinationViewController.
     // Pass the selected object to the new view controller.
     }
     */ 

    @IBOutlet weak var variableLoanAmount2: UITextField!
    @IBOutlet weak var valueReturn2: UITextField!

    func letsDoThis2(z: Float) -> Float {
        
        
        var t = 241
        
        var T_1 = [Int]()
        
        // Create Array from 0 to 240, and return a to zero on completion
        for a in 0...t {
            T_1.append(a)
        }
        
        
        var interest = [Float](arrayLiteral: 0.00125, 0.0012604625825, 0.001231259245, 0.0014684079825, 0.0012310748025, 0.0011568834508333334, 0.001259824315, 0.0012728063074999999, 0.00125164614, 0.0013233373441666667, 0.0014295622991666666, 0.001240680855, 0.0012366587908333334, 0.0012132367125, 0.0014118234075, 0.0011705848033333334, 0.0012616125366666667, 0.0011938211066666667, 0.00115782869, 0.0011057893766666666, 0.0011088477900000001, 0.0014979650475, 0.0012379350966666668, 0.0013732203358333334, 0.0012629100325, 0.0011502370241666666, 0.0012648830583333332, 0.0013286341750000001, 0.0012389803308333334, 0.0012518975216666668, 0.0013126165941666666, 0.0013376849458333333, 0.00112076398, 0.0012183202983333335, 0.0011938249375, 0.0011718566241666667, 0.0012084570250000001, 0.0011884402599999999, 0.00124348719, 0.001217085775, 0.0013659803916666667, 0.0011542059641666666, 0.00131568624, 0.00127327709, 0.001227079245, 0.0011840371333333333, 0.0011454604308333333, 0.0012525185583333333, 0.0013822216408333333, 0.0011917788666666665, 0.0013243710475, 0.0012776330383333335, 0.0012681044991666667, 0.0012155974391666667, 0.0012751619525, 0.0012051591558333334, 0.0013737675458333333, 0.0012413213299999999, 0.0012686380416666667, 0.0013130580441666666, 0.0011723547441666667, 0.00109029957, 0.0012633788183333333, 0.0014031978341666666, 0.0012049175175000001, 0.0013574543775, 0.0013014597808333334, 0.0012286985383333333, 0.00110068757, 0.0012714173883333333, 0.0013214065691666667, 0.0012254944841666668, 0.0012410962033333334, 0.0012162182816666666, 0.0012825131116666667, 0.0013364723241666666, 0.0011209775883333334, 0.0013180092466666667, 0.00125091038, 0.00111435447, 0.0011052147225, 0.0013347431933333333, 0.0012376237766666667, 0.0011985997433333333, 0.0012021498441666667, 0.0013018714608333333, 0.0014568376908333334, 0.0011936725366666666, 0.0010635345241666665, 0.001272829285, 0.0014127304533333334, 0.0013210871591666667, 0.0010849328383333333, 0.0013084258066666666, 0.0010937414491666668, 0.0011797814649999998, 0.0011293126333333332, 0.0011766403033333333, 0.0012492679566666665, 0.0013099005791666666, 0.0012940741766666666, 0.0012471874325, 0.0011766269316666666, 0.0013015326658333333, 0.0011444909441666667, 0.0011986967141666667, 0.0011811764766666666, 0.0012528954325, 0.0012445085183333334, 0.0013088790233333333, 0.0012644414266666667, 0.0012352552291666668, 0.0012781201058333334, 0.00119857311, 0.0012312061216666666, 0.0012196534933333332, 0.0012378575733333335, 0.0011908347533333334, 0.0013024027858333333, 0.001244639125, 0.0013567460258333333, 0.0013289538258333333, 0.0012865424733333334, 0.0012027476500000001, 0.0012733437633333333, 0.0012385433491666667, 0.0012695378433333333, 0.0014249412283333332, 0.0013661320358333334, 0.0011152363058333332, 0.0011772458683333333, 0.001263921305, 0.0013604068175, 0.0012323305183333333, 0.0011631948958333333, 0.0012442454241666668, 0.0011614532066666666, 0.0012055708658333332, 0.0013310172225, 0.0011193759408333333, 0.0013168603049999999, 0.0011760154783333333, 0.0012695508541666666, 0.0012899501483333332, 0.0012161948225, 0.0012516945641666665, 0.0012410720600000002, 0.0012280815616666667, 0.0013290141774999998, 0.0012123840766666667, 0.0011576557450000001, 0.0010783265066666666, 0.0012991779983333332, 0.0012982685791666667, 0.00123948818, 0.0012458641841666667, 0.0013131930483333333, 0.0013366718966666667, 0.0013049594583333334, 0.0013612703524999998, 0.0012963137625, 0.0010924037933333333, 0.0011946035058333334, 0.0013377009575000001, 0.00111686322, 0.0011059701, 0.0013526933408333334, 0.0011872866250000002, 0.0013721481724999999, 0.00121287759, 0.0012927245733333334, 0.0011932337675000001, 0.0013279929633333333, 0.0013523852733333334, 0.0012023492483333334, 0.0013589004575, 0.0013276790091666666, 0.00131554172, 0.0011967825541666667, 0.0012262777075, 0.0011612471116666668, 0.0013477887291666667, 0.0012437944958333335, 0.0013964903741666666, 0.0012657523075, 0.0014038087175, 0.0011451970383333334, 0.0013636447866666665, 0.0013440820425, 0.0012733629858333335, 0.0012988605308333334, 0.0012204647875, 0.0012216592775, 0.0014065813699999999, 0.0014207488958333332, 0.0013034329558333333, 0.0012504684708333333, 0.0013514062716666667, 0.0013338816408333333, 0.0011612707158333334, 0.0012270583666666667, 0.0013221344016666665, 0.0013591164266666667, 0.001148317975, 0.0012727425391666667, 0.0012966889500000002, 0.00127856388, 0.0013189905016666667, 0.0013324431225, 0.0013596390041666667, 0.0012776378258333334, 0.0010689320858333331, 0.0013251458083333334, 0.0013458728583333334, 0.0011280366266666667, 0.0012925937666666667, 0.0013553569708333333, 0.00111600401, 0.0012125354458333334, 0.0012292748391666667, 0.0011948935925, 0.0013241882108333334, 0.00128464023, 0.0013206599808333335, 0.0013150984516666665, 0.00123772054, 0.0011741541475, 0.001277751255, 0.0012590706508333333, 0.0013458105533333334, 0.001328991885, 0.0013575878166666665, 0.0011872491816666668, 0.0013901551658333333, 0.0011734254675, 0.0013293459516666667, 0.0011933976758333332, 0.0011533054916666667, 0.0013563016858333333, 0.001290561945)
        
        // Create function to calculate principal, repayments and interest paid on a cumulative monthly basis
        
        func variablerate(P: inout Float, t: Int) -> Float? {
            var principal = [Float]()
            var i_paid = [Float]()
            i_paid.append(0)
            var repayments = [Float]()
            var R = Float(0)
            
            for a in 1...t-1 {
                P = P - R
                R = (P*interest[a])/(1-pow(1+interest[a],-Float(interest.count-a)))
                repayments.append(R)
                principal.append(P)
                let ip = P*(interest[a-1])
                i_paid.append(i_paid[a-1] + ip)
                P = P*(1+interest[a])
            }
            
            let cc = repayments.max()
            return cc
            
            
        }
        var u = Float(z)
        let dd = variablerate(P: &u, t: 240)!
        return dd
    }

    @IBAction func calculateButton2(_ sender: Any) {
    
        let x = (variableLoanAmount2.text as! NSString).doubleValue
        
        let y = letsDoThis2(z: Float(x))
        let z = String(format: "%.2f", y)
        
        valueReturn2.text = "\(z)"
    }
  
    
}
