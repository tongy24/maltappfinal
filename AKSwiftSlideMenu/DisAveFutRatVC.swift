//
//  DisAveFutRatVC.swift
//  MortgageAssistance&LearningTool
//
//  Created by Chris Bodger on 27/01/2017.
//

import UIKit

class DisAveFutRatVC: BaseViewController {
    
    @IBAction func goBackButton(_ sender: Any) {
    
        self.dismiss(animated: true)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        addSlideMenuButton()
        // Do any additional setup after loading the view.
        
        
        
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    
    /*
     // MARK: - Navigation
     
     // In a storyboard-based application, you will often want to do a little preparation before navigation
     override func prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?) {
     // Get the new view controller using segue.destinationViewController.
     // Pass the selected object to the new view controller.
     }
     */
  
    @IBOutlet weak var variableLoanAmount6: UITextField!
    @IBOutlet weak var valueReturn6: UITextField!

    func letsDoThis6(z: Float) -> Float {
        
        
        var t = 241
        
        var T_1 = [Int]()
        
        // Create Array from 0 to 240, and return a to zero on completion
        for a in 0...t {
            T_1.append(a)
        }
        
        
        var interest = [Float](arrayLiteral: 0.00125, 0.00125, 0.0012166666666666667, 0.0012166666666666667, 0.0012666666666666666, 0.001475, 0.00145, 0.0014833333333333332, 0.0015500000000000002, 0.0014916666666666667, 0.0015, 0.0014833333333333332, 0.001425, 0.001425, 0.0014666666666666667, 0.0014333333333333333, 0.0014166666666666666, 0.0014333333333333333, 0.001425, 0.001475, 0.0014583333333333334, 0.0014416666666666666, 0.0014416666666666666, 0.0014833333333333332, 0.0014166666666666666, 0.001425, 0.0014583333333333334, 0.00145, 0.0013916666666666667, 0.0013916666666666667, 0.0013166666666666667, 0.0013666666666666666, 0.001375, 0.001375, 0.001375, 0.0013583333333333331, 0.0013416666666666668, 0.0013583333333333331, 0.001325, 0.0013083333333333334, 0.0013166666666666667, 0.001325, 0.0013333333333333335, 0.0013333333333333335, 0.0013083333333333334, 0.0013, 0.0013333333333333335, 0.0013333333333333335, 0.0013083333333333334, 0.0012833333333333334, 0.0012833333333333334, 0.0012583333333333333, 0.0012416666666666667, 0.0012166666666666667, 0.0012, 0.00115, 0.0011, 0.0011, 0.0011333333333333334, 0.0011666666666666665, 0.0017666666666666668, 0.0017749999999999999, 0.0017833333333333334, 0.0017666666666666668, 0.0017583333333333333, 0.00175, 0.0017083333333333332, 0.0016666666666666668, 0.0016666666666666668, 0.001725, 0.001725, 0.0017000000000000001, 0.0015916666666666666, 0.0015916666666666666, 0.0015916666666666666, 0.0016083333333333334, 0.0016166666666666666, 0.0015999999999999999, 0.0015999999999999999, 0.0016166666666666666, 0.0016583333333333333, 0.0017000000000000001, 0.0017083333333333332, 0.0017333333333333335, 0.0016416666666666667, 0.00165, 0.0015916666666666666, 0.0015916666666666666, 0.0016083333333333334, 0.0017583333333333333, 0.001625, 0.001525, 0.0015166666666666668, 0.0017166666666666667, 0.001983333333333333, 0.002275, 0.0028166666666666665, 0.0036166666666666665, 0.004091666666666667, 0.004125, 0.004108333333333333, 0.0041, 0.0041, 0.004125, 0.004358333333333334, 0.004366666666666667, 0.004583333333333333, 0.004591666666666667, 0.004733333333333333, 0.0047666666666666664, 0.004783333333333334, 0.004783333333333334, 0.004741666666666667, 0.004533333333333334, 0.00455, 0.004358333333333334, 0.00435, 0.004325000000000001, 0.004333333333333333, 0.004175, 0.00415, 0.003916666666666666, 0.0039, 0.0038750000000000004, 0.003666666666666667, 0.003666666666666667, 0.003666666666666667, 0.003666666666666667, 0.0036750000000000003, 0.0036750000000000003, 0.0036416666666666667, 0.0036333333333333335, 0.0036249999999999998, 0.0036249999999999998, 0.0036249999999999998, 0.003666666666666667, 0.0038166666666666666, 0.003841666666666667, 0.00385, 0.00385, 0.00385, 0.003841666666666667, 0.003841666666666667, 0.003841666666666667, 0.003833333333333333, 0.003833333333333333, 0.003841666666666667, 0.003825, 0.0036000000000000003, 0.0036000000000000003, 0.0034000000000000002, 0.003183333333333333, 0.003175, 0.003175, 0.0029916666666666663, 0.0029916666666666663, 0.0029916666666666663, 0.0027666666666666664, 0.00275, 0.0027583333333333336, 0.0027666666666666664, 0.002916666666666667, 0.002916666666666667, 0.002916666666666667, 0.0029249999999999996, 0.0029083333333333335, 0.003025, 0.0030333333333333336, 0.0030333333333333336, 0.0030416666666666665, 0.00305, 0.0030416666666666665, 0.00305, 0.00305, 0.00305, 0.00305, 0.0030416666666666665, 0.0030416666666666665, 0.00305, 0.00305, 0.0030583333333333335, 0.003383333333333333, 0.0036000000000000003, 0.0037833333333333334, 0.004, 0.004008333333333333, 0.004008333333333333, 0.0041916666666666665, 0.004416666666666667, 0.004391666666666666, 0.004633333333333333, 0.004633333333333333, 0.004625, 0.004658333333333333, 0.004658333333333333, 0.004658333333333333, 0.004691666666666667, 0.004699999999999999, 0.004699999999999999, 0.004699999999999999, 0.004691666666666667, 0.004683333333333334, 0.004483333333333333, 0.004275, 0.0042499999999999994, 0.004058333333333333, 0.004016666666666667, 0.003933333333333333, 0.003933333333333333, 0.003933333333333333, 0.003941666666666667, 0.003958333333333334, 0.004025, 0.0040416666666666665, 0.004458333333333333, 0.004666666666666666, 0.005, 0.005483333333333333, 0.005708333333333333, 0.005725, 0.005691666666666667, 0.005666666666666666, 0.005491666666666666, 0.005491666666666666, 0.005491666666666666, 0.005491666666666666, 0.005491666666666666, 0.0054666666666666665, 0.005416666666666667, 0.005308333333333333, 0.0053, 0.005275, 0.005125, 0.004883333333333333, 0.004699999999999999, 0.004391666666666666, 0.00435, 0.004341666666666666, 0.00435, 0.004316666666666667)
        
        // Create function to calculate principal, repayments and interest paid on a cumulative monthly basis
        
        func variablerate6(P: inout Float, t: Int) -> Float? {
            var principal = [Float]()
            var i_paid = [Float]()
            i_paid.append(0)
            var repayments = [Float]()
            var R = Float(0)
            
            for a in 1...t-1 {
                P = P - R
                R = (P*interest[a])/(1-pow(1+interest[a],-Float(interest.count-a)))
                repayments.append(R)
                principal.append(P)
                let ip = P*(interest[a-1])
                i_paid.append(i_paid[a-1] + ip)
                P = P*(1+interest[a])
            }
            
            let cc = repayments.max()
            return cc
            
            
        }
        var u = Float(z)
        let dd = variablerate6(P: &u, t: 240)!
        return dd
    }
    
    @IBAction func calculateButton6(_ sender: Any) {
    
        let x = (variableLoanAmount6.text as! NSString).doubleValue
        
        let y = letsDoThis6(z: Float(x))
        let z = String(format: "%.2f", y)
        
        valueReturn6.text = "\(z)"

    
    
    }
    
    
    
}
